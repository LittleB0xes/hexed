#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <termios.h>
#include <ctype.h>

void render_file(uint8_t *data, int file_size, char *file_name, int cursor_line, int cursor_char, bool edit_mode);

struct termios orig_termios;

void disableRawMode() {
  tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
}
void enableRawMode() {
  tcgetattr(STDIN_FILENO, &orig_termios);
  atexit(disableRawMode);
  struct termios raw = orig_termios;
  raw.c_lflag &= ~(ECHO | ICANON);
  tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
}

int main(int argc, char *argv[]) {
    enableRawMode();

    FILE *file;
    char c;
    bool quit = false;

    int cursor_line = 1;
    int cursor_char = 1;

    // Try to open the file
    file = fopen(argv[1], "rb");
    if (file == NULL) {
        printf("ERROR - Could not open file : %s", argv[1]);
        return -1;
    }

    // Find the file's size
    fseek(file, 0, SEEK_END);
    int file_size = ftell(file);

    // Rewind
    fseek(file, 0, SEEK_SET);

    // Allocate some memory for the reading file
    uint8_t *data = (uint8_t *)malloc(sizeof(uint8_t) * file_size);

    // Read the data from file
    // And store it in data
    fread(data, sizeof(uint8_t), file_size, file);


    bool edit_mode = false;
    bool refresh = false;
    render_file(data, file_size, argv[1], cursor_line, cursor_char, edit_mode);
    while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q') {
        
        // if (iscntrl(c)) {
        //     printf("%d\n", c);
        // } else {

            switch (c) {
                case 'l':
                    cursor_char += 1;
                    refresh = true;
                    break;
                case 'h':
                    cursor_char -= 1;
                    refresh = true;
                    break;
                case 'j':
                    cursor_line += 1;
                    refresh = true;
                    break;
                case 'k':
                    cursor_line -= 1;
                    refresh = true;
                    break;
                case 'i':
                    edit_mode = true;
                    break;
                case 27:
                    edit_mode = false;
                    break;
            
            // }
        }
        if (refresh) {
            render_file(data, file_size, argv[1], cursor_line, cursor_char, edit_mode);
            refresh = false;
        }
        // printf("%d ('%c')\n", c, c);

    }
    fclose(file);
    return 0;
}
void render_file(uint8_t *data, int file_size, char *file_name, int cursor_line, int cursor_char, bool edit_mode) {
    int line = 0;
    bool end_of_line = false;
    printf("/~~~~~~~~ Hexed ~~~~~~~~/\n");
    if (!edit_mode) {
        printf("\033[38;5;43m%s -- size: \033[38;5;45m%i bytes\n\033[0m", file_name, file_size);

    } else {

        printf("\033[38;5;43m%s -- size: \033[38;5;45m%i bytes\n\033[0m -- EDIT --", file_name, file_size);
    }
    printf("\033[38;5;43m00000000:\033[0m ");
    for (int i = 0; i < file_size; i++) {
        if (i % 0x10 == 0 && i != 0) {
            printf("\033[38;5;43m%08x:\033[0m ", i);
            line += 1;
        }

        if (i % 2 == 0) {printf(" ");}
        // Set color for cursor 
        if (cursor_line * 16 + cursor_char == i && !edit_mode) {
            printf("\033[48;5;88m");
        }
        else if (cursor_line * 16 + cursor_char == i && edit_mode) {
            printf("\033[48;5;60");
        }
        printf("%02x", data[i]);
        printf("\033[0m");

        // Last charcter of the line
        // Print the char line
        if (i % 0x10 == 15 || data[i] == 0x0a || i == file_size - 1) {
            printf("\033[54G \033[38;5;43m| \033[0m ");
            for (int c = 0 + line * 0x10; c < 0x10 + line * 0x10 && c < file_size; c++) {

                // Adjust cursor's color
                if (cursor_line * 16 + cursor_char == c) {printf("\033[48;5;88m");}
                if (data[c] >= 32 && data[c] <= 126) {
                    printf("%c", data[c]);
                } else {
                    printf(".");
                }

                // reset cursor color
                printf("\033[0m");
            }
            printf("\n");
        }
    }
}
